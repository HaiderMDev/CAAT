install("shinyjs")
ui = dashboardPage(
dashboardHeader(title = "TEST"),
dashboardSidebar(
conditionalPanel(condition = "input.program == 'tab1'",
h4(HTML('this is a <b>test</b> page')),
menuitem("home",tabName="home",
radioButtons("test","This a test radiobutton"),
choices=(c(
All = "All",
Some= "Some",
None = "None"
)))
),
dashboardBody(
tabsetPanel(id = "test",
tabPanel(title="tab1", id = "tab1", value = "tab1",
h4("Test Page")))
)
))
server = shinyServer(function(input,output,session) {
}
)
ui = dashboardPage(
dashboardHeader(title = "TEST"),
dashboardSidebar(
conditionalPanel(condition = "input.program == 'tab1'",
h4(HTML('this is a <b>test</b> page')),
menuItem("home",tabName="home",
radioButtons("test","This a test radiobutton"),
choices=(c(
All = "All",
Some= "Some",
None = "None"
)))
),
dashboardBody(
tabsetPanel(id = "test",
tabPanel(title="tab1", id = "tab1", value = "tab1",
h4("Test Page")))
)
))
library(shinyjs)
ui = dashboardPage(
dashboardHeader(title = "TEST"),
dashboardSidebar(
conditionalPanel(condition = "input.program == 'tab1'",
h4(HTML('this is a <b>test</b> page')),
menuItem("home",tabName="home",
radioButtons("test","This a test radiobutton"),
choices=(c(
All = "All",
Some= "Some",
None = "None"
)))
),
dashboardBody(
tabsetPanel(id = "test",
tabPanel(title="tab1", id = "tab1", value = "tab1",
h4("Test Page")))
)
))
shinyApp(ui = ui, server = server)
ui = dashboardPage(
dashboardHeader(title = "TEST"),
dashboardSidebar(
conditionalPanel(condition = "input.program == 'tab1'",
h4(HTML('this is a <b>test</b> page')),
menuItem("home",tabName="home",
radioButtons("test","This a test radiobutton"),
choices=(c(
All = "All",
Some= "Some",
None = "None"
)))
),
dashboardBody(
tabsetPanel(id = "test",
tabPanel(title="tab1", id = "tab1", value = "tab1",
h4("Test Page")))
)
))
ui = dashboardPage(
dashboardHeader(title = "TEST"),
dashboardSidebar(
conditionalPanel(condition = "input.program == 'tab1'",
h4(HTML('this is a <b>test</b> page')),
menuItem("home",tabName="home",
radioButtons("test","This a test radiobutton"),
choices=(c(
All = "All",
Some= "Some",
None = "None"
)))
),
dashboardBody(
tabsetPanel(id = "test",
tabPanel(title="tab1", id = "tab1", value = "tab1",
h4("Test Page")))
)
))
ui = dashboardPage(
dashboardHeader(title = "TEST"),
dashboardSidebar(
conditionalPanel(condition = "input.program == 'tab1'",
h4(HTML('this is a <b>test</b> page')),
menuItem("home",tabName="home",
radioButtons("test","This a test radiobutton"),
choices=(c(
All = "All",
Some= "Some",
None = "None"
)))
),
dashboardBody(
tabsetPanel(id = "test",
tabPanel(title="tab1", id = "tab1", value = "tab1",
h4("Test Page")))
)
))
runApp('OneDrive/CODE/R/R shinny_ATACseq program/ATACseq-Analysis/REDUNDANT/test')
runApp('OneDrive/CODE/R/R shinny_ATACseq program/ATACseq-Analysis/REDUNDANT/test/test_app')
runApp('OneDrive/CODE/R/R shinny_ATACseq program/ATACseq-Analysis/REDUNDANT/test/test_app')
runApp('OneDrive/CODE/R/R shinny_ATACseq program/ATACseq-Analysis/REDUNDANT/test/test_app')
runApp('OneDrive/CODE/R/R shinny_ATACseq program/ATACseq-Analysis/REDUNDANT/test/test_app')
data <- c(1,2,3)
data %>% head()
data <- c("new","oled","really_old")
data %>% upper() %>% head()
data %>% toupper() %>% head()
x||
old
data || "NEW"
data || true
runApp('OneDrive/CODE/R/R shinny_ATACseq program/ATACseq-Analysis/REDUNDANT/test/test_app')
library(shiny); runApp('Documents/GitHub/CAPPS-Data-Analysis/CAPPS-Data Analysis.R')
5 %% 2
5
5 %% 5
starwars
library(starwars)
library(mtcars)
mtcars
head(mtcars)
colnames(mtcars)
mtcars %>% select(mpg) -> new
mtcars %>% select(mtcars$mpg) -> new
mtcars %>% select(mtcars$mpg)
mtcars %>% select(mtcars$mpg)
mtcars
select(mtcars$mpg) -> new
library(dplyr)
select(mtcars$mpg) -> new
colnames(mtcars)
mtcars %>% select(mpg) -> new
new
mtcars %>% select(!mpg) -> new2
new2
mtcars %>% filter(mpg) -> new3
mtcars %>% filter(mpg == 8) -> new3
mtcars
new3
mtcars %>% filter(mpg == 21.4) -> new3
new3
mtcars %>% filter(mpg != 21.4) -> new3
new3
mtcars %>% filter(mpg = 21.4 | cycl == 8) -> new3
mtcars %>% filter(mpg = 21.4 | cycl = 8) -> new3
mtcars %>% filter(mpg = 21.4 | cyc = 8) -> new3
mtcars %>% filter(mpg = 21.4 | cyl = 8) -> new3
mtcars %>% filter(mpg = 21.4 | cyl = 8) -> new3
mtcars %>% filter(mpg < 15) -> new3
new3
filter(mtcars, mpg<15)
x <- c(1,2,3,4)
y <- c(5,6,7,8)
x | y
x < 2 | y < 2
x |y
is.data.frame(x) | is.data.frame(y)
is.data.frame(x) | is.vector(y)
type(x)
?type
typeof(x)
x < 2 || y < 2
x %% y
x
y
x[[2]] / y[[2]]
x[[1]] / y[[1]]
x[[3]] / y[[3]]
x -> function(x){ if}
x <- c(1:50)
x
fun <- function(x) {
if (x %% 3 ==0 & x %% 5 ==0) {
print("foobar")
} else (
if (x %% 3 == 0) {
print("foo")
} else {
if (x %% 5 == 0) {
print("bar")
} else {
print(x)
}
}
)
}
x
fun(x)
apply(x,1,fun)
apply(x,2,fun)
sapply(x,fun)
lapply(x,fun)
lapply(x,fun) <-lap
lap <- lapply(x,fun)
l
lap
sap <- sapply(x,fun)
sap
x
y
x % y
?%
? %%
?%%
x%%y
4%%4
2%%1
1%%2
print(sap,lap)
sap | lap
sap || lap
sap[[2]]
sap[[3]]
sap[[5]]
sap[[15]]
x
order(-x)
mtcars
order(-mtcars$mpg)
order(mtcars[-mtcars$mpg,])
order(mtcars[,-mtcars$mpg])
mtcars[order(mtcars$mpg),]
mtcars[order(-mtcars$mpg),]
elipses = function(row,multiplier,...) {
a = row * multiplier/ divier
return(a)
}
mtcars(mtcars$mpg,2,4)
elipses(mtcars$mpg,2,5)
elipses(mtcars$mpg,multiplier = 2, divier = 5)
elipses(mtcars$mpg,multiplier = 2)
elipses = function(row,multiplier,divider) {
a = row * multiplier/ divider
return(a)
}
elipses(mtcars$mpg,5,4)
elipses(mtcars$mpg,5,4,6)
elipses = function(row,multiplier,divider,...) {
a = row * multiplier/ divider
return(a)
}
elipses(mtcars$mpg,5,4,6)
elipses(mtcars$mpg,5,4,6,5)
elipses(mtcars$mpg,5,4,mean(mtars$mpg))
elipses(mtcars$mpg * 4, mtcars$mpg,5,4
)
elipses(mtcars$mpg * 4, mtcars$mpg,1,4)
elipses(mtcars$mpg * 4, mtcars$mpg,1,16)
elipses(mtcars$mpg * 4, mtcars$mpg,1,1)
mtcars
elipses(mtcars$mpg,1,2,mtcars$mpg/2)
elipses(mtcars$mpg,2,1,mtcars$mpg/2)
elipses = function(row,multiplier,divider,...) {
a = (row * multiplier)/ divider
return(a)
}
elipses(mtcars$mpg,2,1,mtcars$mpg/2)
elipses(mtcars$mpg,1,1)
elipses(mtcars$mpg,2,1)
elipses(mtcars$mpg,2,2)
elipses(mtcars$mpg,2,2,4)
elipses(mtcars$mpg,2,2,2)
elipses(mtcars$mpg,2,2,print("test"))
elipses = function(row,multiplier,divider,...) {
a = (row * multiplier)/ divider
return(a,...)
}
elipses(mtcars$mpg,2,2,print("test"))
elipses = function(row,multiplier,divider,...) {
a = (row * multiplier)/ divider
return(a,...)
}
elipses(mtcars$mpg,2,2,2)
elipses = function(row,multiplier,divider,...) {
a = (row * multiplier)/ divider
return(...,a)
}
elipses(mtcars$mpg,2,2,2)
a = c(1,2,3,4,5,"TRUE")
a
a = c(1,2,3,4,5)
a
typeof(a)
a
a = c(1,2,3,4,5,"TRUE")
typeof(a)
c = c(1L,2L,3L)
typeof(c)
class(c)
class(a)
d = 1:10
d
typeof(d)
length(A)
length(a)
length(b)
b = c(1,2,3,4,5)
b
length(b)
as.numeric(a)
a
vector("name",length=5)
vector("name",length=5)
character(5)
numeric(5)
e = character(5)
f = numeric(5)
typeof(e)
typeof(f)
g = logical(5)
g
g = c(g,"haider")
g
length(g)
g = c("hassan",g)
g
d = seq(10)
d
d = seq(from = 1, to = 10, by = 0.5)
d
j = c(TRUE,FALSE,NA)
typeof)(j)
typeof(j)
k = c("TRUE","FALSE",NA)
k
head(k)
typeof(k)
is.na(j)
anyNA(j)
l = as.character(1:10)
l
typeof(l)
m = as.integer(1:10)
m
typeof(m)
nchar(m)
nchar*i
nchar(i)
i
i = logical(5)
i
nchar(i)
z = as.character(5)
z
z = character(5)
z
i = logical(1:10)
i=logical(TRUE,FALSE,TRUE,FALSE)
I=logical(length = 5)
i
I
q = character(1:10)
q = numeric(1:10)
q = numeric(1:10,length=10)
q = seq(from=1,to=10,by=0.1)
q
a = c(1,2,4,5,6, nrow=2,ncol=2)
a
a = matrix(c(1,2,4,5,6) nrow=2,ncol=2)
a = matrix(c(1,2,4,5,6), nrow=2,ncol=2)
a
a = matrix(c(1,2,4,5), nrow=2,ncol=2)
a
dim(a)
dimnames(a)
dimnames(c("haider","hassan"))
dimnames(a("haider","hassan"))
a
class(a)
typeof(a)
attributes(a)
attributes(i)
attributes(b)
b = c(1:10)
dim(c(2,2))
b
b = c(1:10)
dim(b(2,2))
b
dim(2,2)
dim(b)
b
b
dim(b) <-  c(2,2)
dim(b) <-  c(2,5)
b
b = c(1:10)
typeof(b)
dim(b) <- c(2,5) # not it turns vector b into a matrix
typeof(b)
b = c(1:10)
typeof(b)
class(b)
b
dim(b) <- c(2,5) # not it turns vector b into a matrix
class(b)
b = c(1,2,3,4,5)
typeof(b)
class(b)
b
c = c(6,7,8,9,10)
c
e = cbind(b,c)
e
f = rbind(b,c)
f
typeof(b)
typeof(c)
typeof(e)
typeof(f)
class(b)
class(f)
c <- matrix(c(2,5,3,4,5,6,7,8,9,10,1,12),nrow=2,ncol=2,byrow=TRUE)
c
c <- matrix(c(2,5,3,4,5,6,7,8,9,10,1,12),nrow=2,ncol=6,byrow=TRUE)
c
c <- matrix(c(2,5,3,4,5,6,7,8,9,10,1,12),nrow=2,ncol=6,bycol=TRUE)
C
c <- matrix(c(2,5,3,4,5,6,7,8,9,10,1,12),nrow=2,ncol=6,byrow=TRUE)
c
c <- matrix(c(2,5,3,4,5,6,7,8,9,10,1,12),nrow=2,ncol=6)
c
c[2,3]
c[[1]]
c[[2]]
List_of_packages = c("Shiny","Shinydashboard","DT","DiffBind","tidyverse","DESeq2","edgeR",
"shinyjqui","shinyWidgets","shinycssloaders","circlize","ChIPseeker",
"org.Hs.eg.db","org.Mm.eg.db","TxDb.Mmusculus.UCSC.mm10.knownGene",
"TxDb.Hsapiens.UCSC.hg19.knownGene","pheatmap","RColorbrewer","clusterProfiler",
"reshape","ggplot2","colourpicker","ggupset")
List_of_packages
for (i in range(List_of_packages)){
if (!require(i)) {
install.packages(List_of_packages)
}
}
install.packages(List_of_packages)
install.packages(List_of_packages)
for (i in range(List_of_packages)){
if (!require(i)) {
install.packages(List_of_packages)
} else if (require(i) == TRUE) {
library(i)
}
}
install.packages(List_of_packages)
install.packages(List_of_packages)
require(ggplot2)
require(ggupset)
library(ggupset)
for (i in range(List_of_packages))
{
if (!require(i)) {
install.packages(List_of_packages)
} else if (require(i)) {
sprintf("%s package is already installed", i)
}
}
install.packages(List_of_packages)
install.packages(List_of_packages)
for (i in range(List_of_packages)) {
if (!require(i)) {
install.packages(List_of_packages)
} else (require(i)) {
}
}
for (i in range(List_of_packages)) {
if (!require(i)) {
install.packages(List_of_packages)
} else if (require(i)) {
}
}
install.packages(List_of_packages)
install.packages(List_of_packages)
a = c(1:10)
for (i in range(a)) {
print(i)
}
a
for (i in range(a)) {
print(i)
}
for (i in length(a)) {
print(i)
}
for (i in Position(a)) {
print(i)
}
library(shiny); runApp('Documents/GitHub/CAPPS-Data-Analysis/CAPPS-Data Analysis.R')
